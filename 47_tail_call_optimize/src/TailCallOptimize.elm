-- 再帰呼び出しの最適化(tail call optimization)
-- 再帰の末尾がその関数自身の呼び出しで終わっている場合に行われる最適化
-- 再帰的呼び出しのデメリットは呼び出した回数だけコールスタックを消費すること
-- つまり, 計算途中を全て覚えておく必要がある
-- 再帰呼び出しを数千回ほど行うとスタックが溢れてスタックオーバーフローを起こすため, 最適化を行う必要がある
-- 最適化を行うことで計算途中を覚えておく必要の無いコードにすることができる
-- 前の例では末尾が+演算子のため, 最適化はされない
sumUtil n =
    sumUtilHelp 0 n

sumUtilHelp sum n =
    if n == 0 then
        sum
    else
        sumUtilHelp (sum + n) (n - 1)
